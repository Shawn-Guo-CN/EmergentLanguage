from abc import ABC, abstractmethod, abstractstaticmethod
from .utils import args


class BaseGame(ABC):
    def __init__(self, 
        data_loader, 
        optimiser=args.optimiser,
        learning_rate=args.learning_rate,
    ):
        """Initialise the elements of games including (but not limited to):
            i) agents, i.e. speaker and listener;
            ii) reward/loss function and optimiser;
            iii) data loader.

        Args:
            data_loader: instance from package 'data_loader'; class that could enumerate all inputs (in torch.Tensor).
            optimiser: torch.optim instance;
            learning_rate: float; 

        """
        self.data_loader = data_loader
        self.speaker, self.listener = self._init_agents()
        self.speaker_optimiser = optimiser(self.speaker.parameters(), lr=learning_rate)
        self.listenre_optimiser = optimiser(self.listener.parameters(), lr=learning_rate)
        

    @abstractmethod
    def train(self):
        """Train agents in the game.

        Usually, it should contain three steps: i) percept; ii) act; iii) reward/loss backpropagation.

        An example is:
            ```python
            messages, logits, msg_mask = self.percept(x)
            return logits, self.act(messages, msg_masks, candidates)
            ```
        """
        raise NotImplementedError

    def get_language(self, x):
        """Get langauge from agents.

        Extract the emergent language from agents either during or after training.

        Args:
            x: torch.Tensor instance; the objects from environments for speakers to observe.
        
        Returns:
            messages: torch.Tensor instance; the messages generated by speakers.
            logits: torch.Tensor instance; the logits for generating messages, the size should be B*T*V where: i) B is 
                batch size; ii) T is the maximum length of messages; iii) V is the vocabulary size.
        """

        messages, logits, _ = self.percept(x)
        return messages, logits

    @abstractmethod
    def percept(self, x):
        """Perception procedure of speakers.

        Procedure for speakers to: i) observe the input object, ii) generate messages for listeners.

        Args:
            x: torch.Tensor instance; the objects from environments for speakers to observe.
            
        Returns:
            messages: torch.Tensor instance; the messages generated by speakers.
            logits: torch.Tensor instance; the logits for generating messages, the size should be B*T*V where: i) B is 
                batch size; ii) T is the maximum length of messages; iii) V is the vocabulary size.
            masks: torch.Tensor instance; the mask matrix for messages to make using 
                torch.nn.utils.rnn.pack_padded_sequence easier.
        """
        raise NotImplementedError

    @abstractmethod
    def act(self):
        """Act procedure of listeners.

        Procedure for listeners to: i) encode the input object, ii) perform the required actions (reference or 
        reconstructions).

        Returns:
            Implemented by different kinds of games.
        """
        raise NotImplementedError

    @abstractstaticmethod
    def _init_agents():
        raise NotImplementedError